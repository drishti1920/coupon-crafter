import { useRef } from 'react';
import { Coupon } from '../types';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface CouponPreviewProps {
  coupon: Coupon;
  allCoupons: Coupon[];
}

export default function CouponPreview({ coupon, allCoupons }: CouponPreviewProps) {
  const couponRef = useRef<HTMLDivElement>(null);

  const generatePDF = async () => {
    if (!couponRef.current) return;
    
    // Show loading state to user
    const loadingElement = document.createElement('div');
    loadingElement.className = 'fixed top-0 left-0 w-full h-full flex items-center justify-center bg-black bg-opacity-50 z-50';
    loadingElement.innerHTML = '<div class="bg-white p-4 rounded-lg shadow-lg"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-2"></div><p class="text-center">Generating PDF...</p></div>';
    document.body.appendChild(loadingElement);
    
    const pdf = new jsPDF('portrait', 'mm', 'a4');
    pdf.setProperties({
      title: 'Retailer Coupons',
      subject: 'Coupons generated by CouponCrafter',
      creator: 'CouponCrafter',
      author: 'Retailer Coupon Generator'
    });
    
    let pageCount = 0;
    
    for (const couponItem of allCoupons) {
      // Create a temporary div to render each coupon
      const tempDiv = document.createElement('div');
      tempDiv.style.position = 'absolute';
      tempDiv.style.left = '-9999px';
      document.body.appendChild(tempDiv);
      
      // Clone the coupon template and update its content
      const couponTemplate = couponRef.current.cloneNode(true) as HTMLDivElement;
      
      // Update the coupon data
      const serialNumberEl = couponTemplate.querySelector('[data-field="serialNumber"]');
      const couponCodeEl = couponTemplate.querySelector('[data-field="couponCode"]');
      const entryDateEl = couponTemplate.querySelector('[data-field="entryDate"]');
      const pageNumberEl = couponTemplate.querySelector('[data-field="pageNumber"]');
      
      if (serialNumberEl) serialNumberEl.textContent = couponItem.serialNumber.toString();
      if (couponCodeEl) couponCodeEl.textContent = couponItem.couponCode;
      if (entryDateEl) entryDateEl.textContent = couponItem.entryDate;
      if (pageNumberEl) pageNumberEl.textContent = `Page ${pageCount + 1} of ${allCoupons.length}`;
      
      tempDiv.appendChild(couponTemplate);
      
      // Set specific dimensions to match the preview
      couponTemplate.style.width = '210mm';
      couponTemplate.style.maxWidth = '100%';
      couponTemplate.style.boxSizing = 'border-box';
      couponTemplate.style.padding = '10mm';
      couponTemplate.style.margin = '0';
      couponTemplate.style.backgroundColor = 'white';
      
      // Convert the div to canvas with a lower scale to prevent zooming
      const canvas = await html2canvas(couponTemplate, {
        scale: 1.2, // Reduced scale for better sizing
        logging: false,
        useCORS: true,
        backgroundColor: '#ffffff'
      });
      
      // Calculate dimensions to maintain aspect ratio
      const imgWidth = 190; // A4 width with margins (210mm - 20mm margins)
      const pageHeight = 297; // A4 height in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      // Add to PDF with adjusted dimensions
      const imgData = canvas.toDataURL('image/png');
      if (pageCount > 0) {
        pdf.addPage();
      }
      
      // Center the image on the page with proper margins
      const xPosition = (210 - imgWidth) / 2;
      const yPosition = 10;
      
      pdf.addImage(imgData, 'PNG', xPosition, yPosition, imgWidth, Math.min(imgHeight, pageHeight - 20));
      pageCount++;
      
      // Clean up
      document.body.removeChild(tempDiv);
    }
    
    // Remove loading element
    document.body.removeChild(document.body.querySelector('.fixed.top-0.left-0.w-full.h-full')!);
    
    // Save the PDF
    pdf.save('retailer-coupons.pdf');
  };

  if (!coupon) {
    return <div>No coupon to preview</div>;
  }

  return (
    <div className="space-y-4">
      <div 
        ref={couponRef} 
        className="border border-gray-300 rounded-lg p-4 bg-white shadow-sm"
        style={{ 
          width: '100%', 
          maxWidth: '800px', 
          margin: '0 auto',
          fontFamily: 'Poppins, sans-serif',
          boxSizing: 'border-box',
          pageBreakInside: 'avoid' // Prevent coupon from breaking across pages when printing
        }}
      >
        {/* Header */}
        <div className="text-center border-b border-gray-300 pb-3 mb-3">
          <h2 className="text-lg font-bold text-blue-800">Chalo Chand Se Hath Milaye - Retailer Coupan Summary</h2>
        </div>
        
        {/* Retailer Details */}
        <div className="grid grid-cols-2 gap-4 mb-4 text-sm">
          <div>
            <p><span className="font-semibold">Retailer Code:</span> {coupon.retailerCode}</p>
            <p><span className="font-semibold">Retailer Name:</span> {coupon.retailerName}</p>
          </div>
          <div>
            <p><span className="font-semibold">Retailer Area:</span> {coupon.retailerArea}</p>
            <p><span className="font-semibold">Retailer Mobile:</span> {coupon.retailerMobile}</p>
          </div>
        </div>
        
        {/* SR and Head Info */}
        <div className="mb-4 text-sm border-b border-gray-300 pb-2">
          <p><span className="font-semibold">SR:</span> Default SR</p>
          <p><span className="font-semibold">Head:</span> Default Head</p>
        </div>
        
        {/* Coupon Table */}
        <div className="mb-4">
          <table className="min-w-full border border-gray-300 text-sm">
            <thead>
              <tr className="bg-gray-100">
                <th className="border border-gray-300 px-4 py-2 text-left">S.No.</th>
                <th className="border border-gray-300 px-4 py-2 text-left">From Coupon</th>
                <th className="border border-gray-300 px-4 py-2 text-left">To Coupon</th>
                <th className="border border-gray-300 px-4 py-2 text-left">Entry Date</th>
                <th className="border border-gray-300 px-4 py-2 text-left">Total Coupon</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className="border border-gray-300 px-4 py-2" data-field="serialNumber">{coupon.serialNumber}</td>
                <td className="border border-gray-300 px-4 py-2" data-field="couponCode">{coupon.couponCode}</td>
                <td className="border border-gray-300 px-4 py-2" data-field="couponCode">{coupon.couponCode}</td>
                <td className="border border-gray-300 px-4 py-2" data-field="entryDate">{coupon.entryDate}</td>
                <td className="border border-gray-300 px-4 py-2">1</td>
              </tr>
            </tbody>
          </table>
        </div>
        
        {/* Footer */}
        <div className="pt-2 text-sm">
          <div className="flex justify-between items-center">
            <div>
              <p className="text-xs text-gray-600">Disclaimer: This is an official coupon issued by the company.</p>
            </div>
            <div className="text-right">
              <p><span className="font-semibold">Grand Total:</span> {coupon.grandTotal}</p>
              <p><span className="font-semibold">Date:</span> {new Date().toLocaleDateString()}</p>
              <p data-field="pageNumber">Page {coupon.serialNumber} of {coupon.totalCoupons}</p>
              <p className="text-xs text-gray-500 italic">System generated - no signature required</p>
            </div>
          </div>
        </div>
      </div>

      <div className="flex justify-center">
        <button 
          onClick={generatePDF}
          className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-md transition duration-150 ease-in-out flex items-center justify-center"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-5 w-5 mr-2" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" 
            />
          </svg>
          Export All to PDF
        </button>
      </div>
    </div>
  );
}
